#!/usr/bin/env python
from repo_scraper.constants.extensions import *
from repo_scraper.constants.result import *
from repo_scraper.FolderChecker import FolderChecker
import argparse
import re
import sys

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--force", action="store_true", help="Force execution, prevents confirmation prompt form appearing")
parser.add_argument("-i", "--ignore", help="optional ignore file", type=str)
parser.add_argument("-w", "--warnings", action="store_true", help="Print warnings (and alerts)")
parser.add_argument("-a", "--printall", action="store_true", help="Print everything (alerts, warnings and non-matches)")
parser.add_argument("-e", "--extensions",
    help='''Comma-separated extensions, files that don't match any of these will raise a warning.
         If empty, uses default list: %s ''' % DEFAULT_EXTENSIONS_FORMAT)
parser.add_argument("-p", "--path", help="directory location, if this is not provided, the script will run on the working directory")
parser.add_argument("-g", "--includegit", action="store_true", help="Includes .git/ folder in the search scope, disabled by default")
args = parser.parse_args()

print('IMPORTANT: This script is going to use the filesystem.\n'
        'Do not change any files in the directory while the script is running, have a coffee or '
        'something.\n')
if not args.force:
    continue_ = raw_input("Do you want to continue? (y/n): ")
    if continue_.lower()!='y':
        sys.exit('Aborted by the user')

folder_path = '.' if args.path is None else args.path
ignore_path = args.ignore

results_to_print = [ALERT]
if args.warnings:
    results_to_print += [WARNING]
elif args.printall:
    results_to_print += [WARNING, NOTHING]

if args.extensions:
    allowed_extensions = re.compile(',\s*\.?').split(args.extensions.lower())
else:
    allowed_extensions = DEFAULT_EXTENSIONS

print('Allowed extensions: %s' %  reduce(lambda x,y: x+', '+y, allowed_extensions))

if ignore_path:
    print('Using ignore file %s\n' % ignore_path)
else:
    print('\n')

#Create an instance of folder checker,
#this class will list files in all subdirectories,
#then apply ignore file rules. It provides a generator
#to check each file
ignore_git = not args.includegit
fc = FolderChecker(folder_path, allowed_extensions=allowed_extensions,
                                ignore_git_folder=ignore_git,
                                ignore_path=ignore_path)
#Get the generator to traverse the folder structure
file_traverser = fc.file_traverser()

for result in file_traverser:
    if result.result_type in results_to_print:
        print(result)
